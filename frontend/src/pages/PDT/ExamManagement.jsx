"use client"

import { useState, useEffect } from "react"
import axios from "axios"
import { Upload, Download, Search, ChevronDown, ChevronUp, Trash2 } from "lucide-react"
import Swal from "sweetalert2"
import { toast } from "react-toastify"

export default function ExamManagement() {
  const [file, setFile] = useState(null)
  const [data, setData] = useState([])
  const [from, setFrom] = useState("")
  const [to, setTo] = useState("")
  const [classCode, setClassCode] = useState("")
  const [loading, setLoading] = useState(false)
  const [expandedRows, setExpandedRows] = useState(new Set())
  const [selectedRows, setSelectedRows] = useState(new Set())

  // ‚úÖ T√¨m ki·∫øm + Popup khi kh√¥ng c√≥ d·ªØ li·ªáu
  const handleSearch = async () => {
    try {
      setLoading(true)

      const params = {}
      if (from) params.from = from
      if (to) params.to = to
      if (classCode) params.class_code = classCode

      const res = await axios.get("http://localhost:8000/api/exam-sessions", {
        params,
      })

      const fetchedData = Array.isArray(res.data.data) ? res.data.data : []
      setData(fetchedData)
      setSelectedRows(new Set())

      if (fetchedData.length === 0) {
        Swal.fire({
          icon: "info",
          title: "Kh√¥ng c√≥ d·ªØ li·ªáu!",
          text: `Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o cho m√£ l·ªõp "${classCode}".`,
          confirmButtonColor: "#3085d6",
        })
      } else {
        toast.success(`‚úÖ T√¨m th·∫•y ${fetchedData.length} k·∫øt qu·∫£ ph√π h·ª£p!`)
      }
    } catch (error) {
      console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", error)
      toast.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu!")
    } finally {
      setLoading(false)
    }
  }

  const handleClearClassCode = () => {
    setClassCode("")
    setSelectedRows(new Set())
  }

  const handleDeleteSingle = async (examSessionId) => {
    const confirm = await Swal.fire({
      title: "X√≥a k·ª≥ thi?",
      text: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a k·ª≥ thi n√†y kh√¥ng?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
      confirmButtonText: "X√≥a",
      cancelButtonText: "H·ªßy",
    })

    if (confirm.isConfirmed) {
      try {
        setLoading(true)
        await axios.delete(`http://localhost:8000/api/exam-sessions/${examSessionId}`)
        toast.success("‚úÖ X√≥a k·ª≥ thi th√†nh c√¥ng!")
        handleSearch()
      } catch (error) {
        console.error("L·ªói khi x√≥a:", error)
        toast.error("‚ùå L·ªói khi x√≥a k·ª≥ thi!")
      } finally {
        setLoading(false)
      }
    }
  }

  const handleDeleteBulk = async () => {
    if (selectedRows.size === 0) {
      toast.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt k·ª≥ thi ƒë·ªÉ x√≥a!")
      return
    }

    const confirm = await Swal.fire({
      title: "X√≥a h√†ng lo·∫°t?",
      text: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${selectedRows.size} k·ª≥ thi ƒë√£ ch·ªçn kh√¥ng?`,
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
      confirmButtonText: "X√≥a t·∫•t c·∫£",
      cancelButtonText: "H·ªßy",
    })

    if (confirm.isConfirmed) {
      try {
        setLoading(true)
        const idsToDelete = Array.from(selectedRows)
        await axios.post("http://localhost:8000/api/exam-sessions/delete-bulk", {
          ids: idsToDelete,
        })
        toast.success(`‚úÖ X√≥a ${selectedRows.size} k·ª≥ thi th√†nh c√¥ng!`)
        setSelectedRows(new Set())
        handleSearch()
      } catch (error) {
        console.error("L·ªói khi x√≥a h√†ng lo·∫°t:", error)
        toast.error("‚ùå L·ªói khi x√≥a h√†ng lo·∫°t!")
      } finally {
        setLoading(false)
      }
    }
  }

  const toggleRowSelection = (examSessionId) => {
    const newSelected = new Set(selectedRows)
    if (newSelected.has(examSessionId)) {
      newSelected.delete(examSessionId)
    } else {
      newSelected.add(examSessionId)
    }
    setSelectedRows(newSelected)
  }

  const toggleSelectAll = () => {
    if (selectedRows.size === data.length) {
      setSelectedRows(new Set())
    } else {
      setSelectedRows(new Set(data.map((item) => item.exam_session_id)))
    }
  }

  // ‚úÖ Import Excel + Toastify
  const handleImport = async (e) => {
    e.preventDefault()
    if (!file) {
      toast.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn file tr∆∞·ªõc khi import!")
      return
    }

    try {
      setLoading(true)
      const formData = new FormData()
      formData.append("file", file)

      const res = await axios.post("http://localhost:8000/api/exam-sessions/import", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      })

      toast.success(`‚úÖ Import th√†nh c√¥ng! (${res.data.success_rows} / ${res.data.total_rows})`)
      setFile(null)
      handleSearch()
    } catch (error) {
      console.error("üî• Chi ti·∫øt l·ªói import:", error.response?.data || error)
      toast.error("‚ùå Import th·∫•t b·∫°i! Ki·ªÉm tra l·∫°i file.")
    } finally {
      setLoading(false)
    }
  }

  // ‚úÖ Export Excel - C√≥ x√°c nh·∫≠n SweetAlert + th√¥ng b√°o r√µ r√†ng
  const handleExport = async () => {
    const confirm = await Swal.fire({
      title: "Xu·∫•t file Excel?",
      text: "B·∫°n c√≥ mu·ªën xu·∫•t danh s√°ch k·ª≥ thi theo b·ªô l·ªçc hi·ªán t·∫°i kh√¥ng?",
      icon: "question",
      showCancelButton: true,
      confirmButtonText: "C√≥, xu·∫•t ngay",
      cancelButtonText: "H·ªßy",
    });

    if (confirm.isConfirmed) {
      toast.info("üìÅ ƒêang t·∫°o file Excel...");

      // D√πng window.open thay v√¨ window.location.href 
      // ƒë·ªÉ kh√¥ng t·∫£i tr·ª±c ti·∫øp m√† m·ªü tab t·∫£i (tr√°nh ch·∫∑n toast)
      window.open(`http://localhost:8000/api/exam-sessions/export?from=${from}&to=${to}`, "_blank");
    }
  };


  // ‚úÖ Xu·∫•t PDF t·ª´ng k·ª≥ thi
  const handleExportPDF = (id) => {
    toast.info("üìÑ ƒêang t·∫°o file PDF...");
    window.open(`http://localhost:8000/api/exam-sessions/${id}/report`, "_blank");
  };


  // üîÅ T·∫£i d·ªØ li·ªáu khi load trang
  useEffect(() => {
    handleSearch()
  }, [])

  const toggleRowExpand = (examSessionId) => {
    const newExpanded = new Set(expandedRows)
    if (newExpanded.has(examSessionId)) {
      newExpanded.delete(examSessionId)
    } else {
      newExpanded.add(examSessionId)
    }
    setExpandedRows(newExpanded)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      {/* Header */}
      <div className="bg-white border-b border-slate-200 shadow-sm">
        <div className="w-full px-6 py-8">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-blue-700 rounded-lg flex items-center justify-center">
              <span className="text-white font-bold text-lg">üìò</span>
            </div>
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Qu·∫£n l√Ω K·ª≥ Thi</h1>
              <p className="text-sm text-slate-500 mt-1">Ph√≤ng ƒê√†o T·∫°o - H·ªá th·ªëng qu·∫£n l√Ω k·ª≥ thi</p>
            </div>
          </div>
        </div>
      </div>

      <div className="w-full px-6 py-8">
        {/* Filter Section */}
        <div className="bg-white rounded-lg shadow-sm border border-slate-200 p-6 mb-6">
          <h2 className="text-lg font-semibold text-slate-900 mb-4 flex items-center gap-2">
            <Search className="w-5 h-5 text-blue-600" />
            T√¨m ki·∫øm v√† L·ªçc
          </h2>

          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">T·ª´ ng√†y</label>
                <input
                  type="date"
                  value={from}
                  onChange={(e) => setFrom(e.target.value)}
                  className="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">ƒê·∫øn ng√†y</label>
                <input
                  type="date"
                  value={to}
                  onChange={(e) => setTo(e.target.value)}
                  className="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">M√£ l·ªõp</label>
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={classCode}
                    onChange={(e) => setClassCode(e.target.value)}
                    placeholder="Nh·∫≠p m√£ l·ªõp..."
                    className="flex-1 px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition"
                  />
                  {classCode && (
                    <button
                      onClick={handleClearClassCode}
                      className="px-3 py-2 bg-slate-200 hover:bg-slate-300 text-slate-700 rounded-lg transition"
                      title="X√≥a m√£ l·ªõp"
                    >
                      ‚úï
                    </button>
                  )}
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <button
                onClick={handleSearch}
                disabled={loading}
                className="bg-blue-600 hover:bg-blue-700 disabled:bg-slate-400 text-white font-medium px-6 py-2 rounded-lg transition flex items-center justify-center gap-2"
              >
                <Search className="w-4 h-4" />
                T√¨m ki·∫øm
              </button>
              <button
                onClick={handleExport}
                className="bg-emerald-600 hover:bg-emerald-700 text-white font-medium px-6 py-2 rounded-lg transition flex items-center justify-center gap-2"
              >
                <Download className="w-4 h-4" />
                Xu·∫•t Excel
              </button>
            </div>
          </div>
        </div>

        {/* Import Section */}
        <div className="bg-white rounded-lg shadow-sm border border-slate-200 p-6 mb-6">
          <h2 className="text-lg font-semibold text-slate-900 mb-4 flex items-center gap-2">
            <Upload className="w-5 h-5 text-purple-600" />
            Import D·ªØ Li·ªáu
          </h2>

          <form onSubmit={handleImport} className="flex flex-col md:flex-row items-end gap-4">
            <div className="flex-1 w-full">
              <label className="block text-sm font-medium text-slate-700 mb-2">Ch·ªçn file Excel</label>
              <input
                type="file"
                onChange={(e) => setFile(e.target.files[0])}
                accept=".xlsx,.xls,.csv"
                className="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition"
              />
              {file && <p className="text-xs text-slate-500 mt-1">üìÑ {file.name}</p>}
            </div>
            <button
              type="submit"
              disabled={loading || !file}
              className="bg-purple-600 hover:bg-purple-700 disabled:bg-slate-400 text-white font-medium px-6 py-2 rounded-lg transition flex items-center gap-2 whitespace-nowrap w-full md:w-auto"
            >
              <Upload className="w-4 h-4" />
              Import
            </button>
          </form>
        </div>

        {/* Data Table Section */}
        {/* ‚úÖ B·∫£ng d·ªØ li·ªáu */}
        <div className="bg-white rounded-lg shadow-sm border border-slate-200 overflow-hidden">
          <div className="px-6 py-4 border-b border-slate-200 flex items-center justify-between">
            <h2 className="text-lg font-semibold text-slate-900">Danh s√°ch K·ª≥ Thi ({data.length} b·∫£n ghi)</h2>
            <button
              onClick={handleDeleteBulk}
              disabled={loading || selectedRows.size === 0}
              className="bg-red-600 hover:bg-red-700 disabled:bg-slate-400 text-white font-medium px-4 py-2 rounded-lg transition flex items-center gap-2 text-sm"
            >
              <Trash2 className="w-4 h-4" />
              X√≥a ({selectedRows.size})
            </button>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full table-fixed">
              <thead className="bg-slate-50">
                <tr>
                  <th className="w-8 px-2 py-2">
                    <input
                      type="checkbox"
                      checked={data.length > 0 && selectedRows.size === data.length}
                      onChange={toggleSelectAll}
                      className="w-4 h-4 cursor-pointer"
                    />
                  </th>
                  <th className="w-6 px-2 py-2"></th>
                  <th className="w-32 px-2 py-2 text-xs font-bold text-slate-700">M√£ ca thi</th>
                  <th className="w-32 px-2 py-2 text-xs font-bold text-slate-700">M√£ l·ªõp</th>
                  <th className="w-40 px-2 py-2 text-xs font-bold text-slate-700">M√¥n h·ªçc</th>
                  <th className="w-32 px-2 py-2 text-xs font-bold text-slate-700">Ng√†y thi</th>
                  <th className="w-32 px-2 py-2 text-xs font-bold text-slate-700">T√¨nh tr·∫°ng</th>
                  <th className="w-40 px-2 py-2 text-xs font-bold text-slate-700">Gi√°o vi√™n 1</th>
                  <th className="w-40 px-2 py-2 text-xs font-bold text-slate-700">Gi√°o vi√™n 2</th>
                  <th className="w-32 px-2 py-2 text-xs font-bold text-slate-700">K·∫øt qu·∫£</th>
                  <th className="w-24 px-2 py-2 text-xs font-bold text-slate-700">H√†nh ƒë·ªông</th>
                </tr>
              </thead>

              <tbody className="divide-y divide-slate-200">
                {data.length > 0 ? (
                  data.map((item) => (
                    <>
                      <tr key={item.exam_session_id} className="hover:bg-slate-50">
                        <td className="text-center px-2 py-2">
                          <input
                            type="checkbox"
                            checked={selectedRows.has(item.exam_session_id)}
                            onChange={() => toggleRowSelection(item.exam_session_id)}
                            className="w-4 h-4 cursor-pointer"
                          />
                        </td>
                        <td className="text-center">
                          <button
                            onClick={() => toggleRowExpand(item.exam_session_id)}
                            className="text-slate-500 hover:text-slate-800"
                          >
                            {expandedRows.has(item.exam_session_id) ? (
                              <ChevronUp size={16} />
                            ) : (
                              <ChevronDown size={16} />
                            )}
                          </button>
                        </td>
                        <td className="text-xs px-2 py-2 font-medium">{item.exam_code}</td>
                        <td className="text-xs px-2 py-2">{item.class_code}</td>
                        <td className="text-xs px-2 py-2">{item.subject_name}</td>
                        <td className="text-xs px-2 py-2">{item.exam_date}</td>
                        <td className="text-xs px-2 py-2">
                          <span
                            className={`px-2 py-1 rounded-full text-xs ${item.status === "Ho√†n th√†nh"
                              ? "bg-emerald-100 text-emerald-800"
                              : item.status === "ƒêang di·ªÖn ra"
                                ? "bg-blue-100 text-blue-800"
                                : "bg-slate-100 text-slate-800"
                              }`}
                          >
                            {item.status}
                          </span>
                        </td>
                        <td className="text-xs px-2 py-2">{item.teacher1_name || "‚Äî"}</td>
                        <td className="text-xs px-2 py-2">{item.teacher2_name || "‚Äî"}</td>
                        <td className="text-xs px-2 py-2">
                          <button
                            onClick={() => handleExportPDF(item.exam_session_id)}
                            className="text-blue-600 hover:text-blue-800"
                          >
                            Xu·∫•t PDF
                          </button>
                        </td>

                        <td className="text-xs px-2 py-2">
                          <button
                            onClick={() => handleDeleteSingle(item.exam_session_id)}
                            disabled={loading}
                            className="bg-red-500 hover:bg-red-600 disabled:bg-slate-400 text-white px-3 py-1 rounded text-xs transition flex items-center gap-1"
                          >
                            <Trash2 size={14} />
                            X√≥a
                          </button>
                        </td>
                      </tr>

                      {expandedRows.has(item.exam_session_id) && (
                        <tr className="bg-slate-50">
                          <td colSpan="11" className="px-6 py-4">
                            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 text-sm">
                              <p>
                                <strong>Ph√≤ng thi:</strong> {item.exam_room}
                              </p>
                              <p>
                                <strong>T·ªïng m√°y:</strong> {item.total_computers}
                              </p>
                              <p>
                                <strong>S·ªë l∆∞·ª£ng SV:</strong> {item.student_count}
                              </p>
                              <p>
                                <strong>Gi·ªù thi:</strong> {item.exam_time}
                              </p>
                              <p>
                                <strong>Th·ªùi l∆∞·ª£ng:</strong> {item.exam_duration} ph√∫t
                              </p>
                              <p>
                                <strong>Khoa coi thi:</strong> {item.exam_faculty}
                              </p>
                              <p>
                                <strong>Ng√†y t·∫°o:</strong> {item.created_at}
                              </p>
                            </div>
                          </td>
                        </tr>
                      )}
                    </>
                  ))
                ) : (
                  <tr>
                    <td colSpan="11" className="text-center py-8 text-slate-500">
                      üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  )
}
